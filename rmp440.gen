/*
 * Copyright (c) 2017 CNRS
 *
 * Author: Matthieu Herrb - LAAS
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma require "gyro-libs >= 3.0.99.0"
#pragma require "openrobots-idl >= 1.1"

#include "genpos.idl"
#include "gyroLib/gyroTypes.idl"

#include "rmp440Struct.idl"
#include "or/hid/joystick.gen"
#include "or/pose/pose_estimator.gen"

#pragma require "infuse-idl >= 0.1"
#include "infuse/asn1/bitstream.gen"

component rmp440 {
  version "0.1.99";
  email "openrobots@laas.fr";
  lang "c";
  codels-require "rmp440-libs >= 0.5, gyro-libs, felib, MTI-clients, infuse_asn1_types >= 0.1";

  exception already_initialized;
  exception not_connected;
  exception malloc_error;
  exception bad_ref;
  exception rmplib_error;
  exception joystick_error;
  exception gyro_error;
  exception mti_error;
  exception odo3d_error;
  exception motors_off;
  exception emergency_stop;
  exception power_cord_connected;
  exception port_not_found;
  exception cmd_stop_track;
  exception sys_error;
  exception invalid_parameter;

  port in or::genpos::cart_speed cmd_vel;
  port in asn1::bitstream cmd_vel_Infuse;
  port in or_joystick::state Joystick;
  port out or_pose_estimator::state Pose;
  port out asn1::bitstream PoseInfuse;
  port out status_str Status;
  port out rmp::status_str StatusGeneric;

  /*----------------------------------------------------------------------*/
  native log_str;


  ids {
    rmp440_io rmp;
    FE_STR fe;
    mode rs_mode;
    rmp440_feedback rs_data;
    or::genpos::cart_state robot;
    or::genpos::cart_config_var var;
    or::genpos::cart_speed ref;
    kinematics_str kinematics;
    dynamic_str dynamics;
    var_params var_params;
    GYRO_DATA gyroId;
    gyro gyro;
    gyro_asserv gyro_asserv;
    MTI_DATA mtiHandle;
    mti mti;
    mti_config mtiConfig;
    odometry_mode odoMode;
    or::genpos::cart_3dstate robot3d;
    max_accel max_accel;
    log_str log;
    octet infuseTrackMode;
  };

  attribute set_var_params(in var_params);

  /*----------------------------------------------------------------------*/

  task MotionTask {
    period sec_period s;
    stack 65536;
    codel <start>initOdoAndAsserv(out ::ids, out PoseInfuse,
                out infuseTrackMode,
                out StatusGeneric)
      yield ether, odo;
    codel <odo>odoAndAsserv(in rmp,
			    in kinematics,
			    in var_params,
			    in log,
			    in Joystick,
			    inout gyroId,
			    inout fe,
			    inout robot,
			    inout var,
			    inout ref,
			    inout max_accel,
			    out rs_data,
			    out rs_mode,
			    out gyro,
			    out gyro_asserv,
                out mtiHandle,
                out mti,
                inout odoMode,
                inout robot3d,
			    out Pose,
                out PoseInfuse,
			    out Status,
			    out StatusGeneric) yield ether, pause::odo, end;
    codel <end>endOdoAndAsserv(inout rmp, inout rs_data) yield ether;
    throw emergency_stop;
  };


  task TrackTask {
    period sec_period s;
    stack 8192;
  };

  /*----------------------------------------------------------------------*/

  activity Init(in string<32> device =
		"10.40.40.40:8080": "robot device specification") {
    doc "Connect to RMP440 robot";
    codel <start>rmp440InitStart(in device,
				 out rmp, out fe, out rs_data)
      yield init_main;
    codel <init_main>rmp440InitMain(inout rmp,
				    inout fe,
				    out rs_data,
				    out rs_mode,
				    out dynamics,
				    out kinematics,
                    in robot)
      yield pause::init_main, ether;
    throw already_initialized, malloc_error, rmplib_error;
    task MotionTask;
  };

  /*----------------------------------------------------------------------*/

  activity JoystickOn() {
    doc "Activate joystick motion mode";
    task MotionTask;
    codel <start>rmp440JoystickOnStart(in Joystick, inout rs_mode)
      yield js_main;
    codel <js_main>rmp440JoystickOnMain(in Joystick, in rs_mode)
      yield pause::js_main, inter;
    codel <inter>rmp440JoystickOnInter(out rs_mode, out ref) yield ether;
    throw bad_ref, rmplib_error, joystick_error, motors_off,
      emergency_stop, power_cord_connected;
    interrupts JoystickOn, Track, DirectTrack;
  };

  /*----------------------------------------------------------------------*/

  activity Track() {
    doc  "Start tracking a reference port";
    validate trackControl(in rmp, in rs_data);
    codel <start>trackStart(inout rs_mode,
			    port in cmd_vel,
                port in cmd_vel_Infuse,
                in infuseTrackMode) yield track_main, end;
    codel <track_main>pumpReference(in robot,
			      in rs_mode,
			      port in cmd_vel,
                  port in cmd_vel_Infuse,
                  in infuseTrackMode,
			      out ref) yield pause::track_main, end;
    codel <end>smoothStopTrack(in robot,
			       in dynamics,
			       inout rs_mode,
			       out ref) yield ether;
    task TrackTask;
    throw not_connected, port_not_found, bad_ref, cmd_stop_track,
      motors_off, emergency_stop, power_cord_connected;
    interrupts JoystickOn, Track, DirectTrack;
  };
  
  function toggleInfuseTrackMode() {
      doc "Overrides cmd_vel with cmd_vel_Infuse";
      codel toggleInfuseTrackMode(in rs_mode, out infuseTrackMode);
  };

  function Stop() {
    doc "Stop current Tracking";
        codel setZeroVelocity(out rs_mode, out ref);
    interrupts Track, DirectTrack;
  };

  /*----------------------------------------------------------------------*/

  activity DirectTrack(in double v, in double w) {
    doc "Set (v,w) directly with a rosaction";
    validate trackControl(in rmp, in rs_data);
    codel <start>directTrackStart(inout rs_mode,
                in v, in w) yield track_main, end;
    codel <track_main>directPumpReference(in robot,
			      in rs_mode,
                  in v, in w,
			      out ref) yield pause::track_main, end;
    codel <end>directSmoothStopTrack(in robot,
			       in dynamics,
			       inout rs_mode,
			       out ref) yield ether;
    task TrackTask;
    throw not_connected, port_not_found, bad_ref, cmd_stop_track,
      motors_off, emergency_stop, power_cord_connected, invalid_parameter;
    interrupts JoystickOn, Track, DirectTrack;
  };

  /*----------------------------------------------------------------------*/

  activity Gyro(in gyro_params params) {
    doc "Gyro configuration";
    task MotionTask;
    codel <start>rmp440GyroExec(in params,
				in robot,
				inout gyro,
				inout gyroId) yield ether;
    throw gyro_error;
    interrupts Gyro;
  };
  
  activity GyroBiasUpdate(in long nbMeasures) {
    doc "Gyro bias estimation";
    task MotionTask;
    codel <start>rmp440GyroBiasUpdate(in nbMeasures,
				in robot,
				inout gyro,
				inout gyroId) yield ether;
    throw gyro_error;
    interrupts GyroBiasUpdate;
  };

  /*----------------------------------------------------------------------*/

  activity InitMTI(in mti_params params) {
    doc "Init and configure MTI sensor";
    task MotionTask;
    codel <start>rmp440MTIopen(in params,
				inout mtiHandle,
                inout mti,
                inout mtiConfig) yield ether;
    throw mti_error;
  };

  activity ToggleOdometryMode() {
    doc "Enable or disable odometry mode";
    task MotionTask;
    codel <start>rmp440ToggleOdoMode(inout mtiHandle,
                inout mti,
                inout odoMode) yield ether;
    throw odo3d_error;
  };
  
  /*----------------------------------------------------------------------*/
  /* Log */
  function log(in string<64> path = "/tmp/rmp440.log": "Log file name") {
    doc "Log RMP440 internal data";
    codel log_start(in path, inout log);
    throws sys_error;
  };

  function log_stop() {
    doc "Stop logging";
    codel log_stop(out log);
  };
  
};
