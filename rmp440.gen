/*
 * Copyright (c) 2017 CNRS
 *
 * Author: Matthieu Herrb - LAAS
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#pragma require "gyro-libs >= 3.0.99.0"

#include "genpos.idl"
#include "gyroLib/gyroTypes.idl"

#include "rmp440Struct.idl"

component rmp440 {
  version "0.1";
  email "openrobots@laas.fr";
  lang "c";
  codels-require "rmp440-libs, gyro-libs, felib";

  exception already_initialized;
  exception malloc_error;
  exception bad_ref;
  exception rmplib_error;
  exception joystick_error;
  exception gyro_error;
  exception motors_off;
  exception emergency_stop;
  exception power_cord_connected;
  exception poster_not_found;
  exception cmd_stop_track;
  exception sys_error;

  port in or::genpos::cart_speed cmd_vel;
  port out or::genpos::cart_state Odo;
  port out status_str Status;
  port out rmp::status_str StatusGeneric;

  /*----------------------------------------------------------------------*/
  native log_str;

  ids {
    rmp440_io rmp;
    FE_STR fe;
    mode rs_mode;
    rmp440_feedback rs_data;
    status_str status;
    rmp::status_str statusgen;
    or::genpos::cart_state robot;
    or::genpos::cart_config_var var;
    or::genpos::cart_ref ref;
    kinematics_str kinematics;
    dynamic_str dynamics;
    or::genpos::track_mode track_mode;
    GYRO_DATA gyroId;
    gyro gyro;
    gyro_mode gyro_mode;
    gyro_asserv gyro_asserv;
    max_accel max_accel;
    log_str log;
  };

  /*----------------------------------------------------------------------*/

  task MotionTask {
    period 50ms;
    stack 65536;
    codel <start>initOdoAndAsserv(out ::ids) yield ether, odo;
    codel <odo>odo(in rmp,
		   inout gyroId,
		   inout fe,
		   inout robot,
		   inout ref,
		   out rs_data,
		   out rs_mode,
		   out gyro,
		   out gyro_asserv,
		   out status,
		   out statusgen) yield ether, asserv;
    codel <asserv>asserv(in rmp,
			 in robot,
			 in gyro,
			 in track_mode,
			 inout gyro_asserv,
			 inout max_accel,
			 inout rs_data,
			 inout ref,
			 inout rs_mode,
			 out statusgen) yield pause::odo, ether, end;
    codel <end>endOdoAndAsserv(inout rmp, inout rs_data) yield ether;
    throw emergency_stop;
  };

  task TrackTask {
    period 50ms;
    stack 8192;
  };

  /*----------------------------------------------------------------------*/

  activity Init(in string<32> device = 
		"10.40.40.40:8080": "robot device specification") {
    doc "Connect to RMP440 robot";
    codel <start>rmp440InitStart(in device,
				 out rmp, out fe, out rs_data)
      yield main;
    codel <main>rmp440InitMain(in rmp,
			       out rs_data,
			       out rs_mode,
			       out dynamics,
			       out kinematics) yield ether;
    throw already_initialized, malloc_error, rmplib_error;
    task MotionTask;
  };

  /*----------------------------------------------------------------------*/

  activity JoystickOn() {
    doc "Activate joystick motion mode";
    task MotionTask;
    codel <start>rmp440JoystickOnStart() yield ether, main, inter;
    codel <main>rmp440JoystickOnMain() yield ether, inter;
    codel <inter>rmp440JoystickOnInter() yield ether;
    throw bad_ref, rmplib_error, joystick_error, motors_off,
      emergency_stop, power_cord_connected;
    interrupts JoystickOn, Track;
  };

  /*----------------------------------------------------------------------*/

  activity Track(in or::genpos::track_mode mode = 
		 or::genpos::track_speed: "Tracking mode") {
    doc  "Start tracking a reference poster";
    codel <start>trackStart(port in cmd_vel, in mode) yield main, end;
    codel <main>pumpReference(in robot,
			      in rs_mode,
			      in track_mode,
			      port in cmd_vel,
			      out ref) yield pause::main, end;
    codel <end>smoothStopTrack(in robot,
			       in dynamics,
			       inout rs_mode,
			       inout track_mode,
			       out ref) yield ether;
    task TrackTask;
    throw poster_not_found, bad_ref, cmd_stop_track, motors_off,
      emergency_stop, power_cord_connected;
    interrupts JoystickOn, Track;
  };

  function Stop() {
    doc "Stop current Tracking";
    interrupts Track;
  };

  /*----------------------------------------------------------------------*/

  activity Gyro(in gyro_params params) {
    doc "Gyro configuration";
    task MotionTask;
    codel <start>rmp440GyroExec(in params,
				in robot,
				inout gyro,
				inout gyroId) yield ether;
    throw gyro_error;
    interrupts Gyro;
  };

  /* SetParameters */


  /* SetPom */

  /* SetPos */

  /*----------------------------------------------------------------------*/
  /* Log */
  function log(in string<64> path = "/tmp/rmp440.log": "Log file name") {
    doc "Log RMP440 internal data";
    codel log_start(in path, inout log);
    throws sys_error;
  };

  function log_stop() {
    doc "Stop logging";
    codel log_stop(out log);
  };
  
};
